{
	"info": {
		"_postman_id": "6bc6751d-21c5-4a39-af22-f94c003ca0ce",
		"name": "BBY CRM Test Suit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login/Register",
			"item": [
				{
					"name": "Successful Cases",
					"item": [
						{
							"name": "Register new user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{userPassword}}\",\r\n    \"name\": \"{{userName}}\",\r\n    \"businessName\": \"{{userBusinessName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"User Found and Logged In\", () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.environment.set(\"userId\", response.id);\r",
											"\r",
											"pm.test(\"Correct user info registered in database\", () => {\r",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"userName\"));\r",
											"    pm.expect(response.businessName).to.eql(pm.environment.get(\"userBusinessName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{userPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Failing Cases",
					"item": [
						{
							"name": "Register new user with existing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"FailedPw12#\",\r\n    \"name\": \"FailedName\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register without email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"name\": \"FailedGamer\",\r\n    \"password\": \"Fai!edGam3r\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register without name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"email\": \"failed@gamer.com\",\r\n    \"password\": \"Fai!edGam3r\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register without password Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"email\": \"failed@gamer.com\",\r\n    \"name\": \"Failed Gamer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in to user account wrong password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"WrongPW12#\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Successful Cases",
					"item": [
						{
							"name": "Create new contact C1",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"{{contactName1}}\",\r\n    \"email\": \"{{contactEmail1}}\",\r\n    \"phoneNumber\": \"{{contactPhone1}}\",\r\n    \"description\": \"{{contactDescription1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/contact/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new contact C2",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"{{contactName2}}\",\r\n    \"email\": \"{{contactEmail2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/contact/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contacts of a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"C1 & C2 exists\", () => {\r",
											"    pm.expect(response.length).to.equal(2);\r",
											"});\r",
											"\r",
											"const C1 = response[0];\r",
											"const C2 = response[1];\r",
											"\r",
											"pm.environment.set(\"contactId1\", C1._id);\r",
											"pm.environment.set(\"contactId2\", C2._id);\r",
											"\r",
											"pm.test(\"C1 stored correctly\", () => {\r",
											"    pm.expect(C1.name).to.eql(pm.environment.get(\"contactName1\"));\r",
											"    pm.expect(C1.email).to.eql(pm.environment.get(\"contactEmail1\"));\r",
											"    pm.expect(C1.phoneNumber).to.eql(pm.environment.get(\"contactPhone1\"));\r",
											"    pm.expect(C1.description).to.eql(pm.environment.get(\"contactDescription1\"));\r",
											"});\r",
											"\r",
											"pm.test(\"C2 stored correctly\", () => {\r",
											"    pm.expect(C2.name).to.eql(pm.environment.get(\"contactName2\"));\r",
											"    pm.expect(C2.email).to.eql(pm.environment.get(\"contactEmail2\"));\r",
											"    pm.expect(C2.phoneNumber).to.eql(undefined);\r",
											"    pm.expect(C2.description).to.eql(undefined);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/contact/getAll?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"getAll"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contact",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"contactId\": \"{{contactId1}}\",\r\n    \"name\": \"{{contactName1}}\",\r\n    \"email\": \"{{contactEmailUpdated}}\",\r\n    \"phoneNumber\": \"{{contactPhone1}}\",\r\n    \"description\": \"{{contactDescription1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/contact/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Got the right contact back\", () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"contactName1\"));\r",
											"    pm.expect(response.email).to.eql(pm.environment.get(\"contactEmailUpdated\"));\r",
											"    pm.expect(response.phoneNumber).to.eql(pm.environment.get(\"contactPhone1\"));\r",
											"    pm.expect(response.description).to.eql(pm.environment.get(\"contactDescription1\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/contact/get?userId={{userId}}&contactId={{contactId1}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "contactId",
											"value": "{{contactId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete one contact",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"contactId\": \"{{contactId1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/contact/deleteOne",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"deleteOne"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check contact has been deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact deleted successfully\", () => {\r",
											"    var res = (_.isEmpty(pm.responseBody));\r",
											"    pm.expect(res).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/contact/get?userId={{userId}}&contactId={{contactId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "contactId",
											"value": "{{contactId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Failing Cases",
					"item": [
						{
							"name": "Create contact without name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"email\": \"gamer@games.com\",\r\n    \"description\": \"splatoon gamer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/contact/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create contact without userId",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Link\",\r\n    \"phoneNumber\": \"12312412\",\r\n    \"description\": \"zelda gamer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/contact/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"contact",
										"new"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Successful Cases",
					"item": [
						{
							"name": "Create new category G1",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"{{categoryName1}}\",\r\n    \"colour\": \"{{categoryColour1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/category/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new category G2",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"{{categoryName2}}\",\r\n    \"colour\": \"{{categoryColour2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/category/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"G1 & G2 exists\", () => {\r",
											"    pm.expect(response.length).to.equal(2);\r",
											"});\r",
											"\r",
											"const G1 = response[0];\r",
											"const G2 = response[1];\r",
											"\r",
											"pm.environment.set(\"categoryId1\", G1._id);\r",
											"pm.environment.set(\"categoryId2\", G2._id);\r",
											"\r",
											"pm.test(\"G1 stored correctly\", () => {\r",
											"    pm.expect(G1.name).to.eql(pm.environment.get(\"categoryName1\"));\r",
											"    pm.expect(G1.colour).to.eql(pm.environment.get(\"categoryColour1\"));\r",
											"});\r",
											"\r",
											"pm.test(\"G2 stored correctly\", () => {\r",
											"    pm.expect(G2.name).to.eql(pm.environment.get(\"categoryName2\"));\r",
											"    pm.expect(G2.colour).to.eql(pm.environment.get(\"categoryColour2\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/category/getAll?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"getAll"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update category",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"categoryId\": \"{{categoryId1}}\",\r\n    \"name\": \"{{categoryName1}}\",\r\n    \"colour\": \"{{categoryColourUpdated}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/category/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Got the right category back\", () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"categoryName1\"));\r",
											"    pm.expect(response.colour).to.eql(pm.environment.get(\"categoryColourUpdated\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/category/get?userId={{userId}}&categoryId={{categoryId1}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "categoryId",
											"value": "{{categoryId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete one category",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"categoryId\": \"{{categoryId1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/category/deleteOne",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"deleteOne"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check category deleted successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact deleted successfully\", () => {\r",
											"    var res = (_.isEmpty(pm.responseBody));\r",
											"    pm.expect(res).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/category/get?userId={{userId}}&categoryId={{contactId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "categoryId",
											"value": "{{contactId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Failing Cases",
					"item": [
						{
							"name": "New category without name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"colour\": \"#ffffff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/category/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "New category without colour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"game\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/category/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"category",
										"new"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Successful Cases",
					"item": [
						{
							"name": "New product with category",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"{{productName1}}\",\r\n    \"price\": {{productPrice1}},\r\n    \"categoryId\": \"{{categoryId2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/product/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "New product without category",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"{{productName2}}\",\r\n    \"price\": {{productPrice2}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/product/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "New product for testing",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"{{productName3}}\",\r\n    \"price\": {{productPrice3}},\r\n    \"categoryId\": \"{{categoryId2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/product/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"P1 & P2 exists\", () => {\r",
											"    pm.expect(response.length).to.equal(3);\r",
											"});\r",
											"\r",
											"const P1 = response[0];\r",
											"const P2 = response[1];\r",
											"const P3 = response[2];\r",
											"\r",
											"pm.environment.set(\"productId1\", P1._id);\r",
											"pm.environment.set(\"productId2\", P2._id);\r",
											"pm.environment.set(\"productId3\", P3._id);\r",
											"\r",
											"pm.test(\"P1 stored correctly\", () => {\r",
											"    pm.expect(P1.name).to.eql(pm.environment.get(\"productName1\"));\r",
											"    pm.expect(P1.price).to.eql(parseFloat(pm.environment.get(\"productPrice1\")));\r",
											"    pm.expect(P1.categoryId).to.eql(pm.environment.get(\"categoryId2\"));\r",
											"});\r",
											"\r",
											"pm.test(\"P2 stored correctly\", () => {\r",
											"    pm.expect(P2.name).to.eql(pm.environment.get(\"productName2\"));\r",
											"    pm.expect(P2.price).to.eql(parseFloat(pm.environment.get(\"productPrice2\")));\r",
											"});\r",
											"\r",
											"pm.test(\"P3 stored correctly\", () => {\r",
											"    pm.expect(P3.name).to.eql(pm.environment.get(\"productName3\"));\r",
											"    pm.expect(P3.price).to.eql(parseFloat(pm.environment.get(\"productPrice3\")));\r",
											"    pm.expect(P3.categoryId).to.eql(pm.environment.get(\"categoryId2\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/product/getAll?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"getAll"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"productId\": \"{{productId1}}\",\r\n    \"name\": \"{{productName1}}\",\r\n    \"price\": {{productPriceUpdated}},\r\n    \"categoryId\": \"{{categoryId2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/product/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Got product correctly\", () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"productName1\"));\r",
											"    pm.expect(response.price).to.eql(parseFloat(pm.environment.get(\"productPriceUpdated\")));\r",
											"    pm.expect(response.categoryId).to.eql(pm.environment.get(\"categoryId2\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/product/get?userId={{userId}}&productId={{productId1}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "productId",
											"value": "{{productId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete one product",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"productId\": \"{{productId1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/product/deleteOne",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"deleteOne"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check product deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact deleted successfully\", () => {\r",
											"    var res = (_.isEmpty(pm.responseBody));\r",
											"    pm.expect(res).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/product/get?userId={{userId}}&productId={{productId1}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "productId",
											"value": "{{productId1}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Failing Cases",
					"item": [
						{
							"name": "New product without name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"price\": 10.00\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/product/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "New product without price",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"userId\": \"{{userId}}\",\r\n    \"name\": \"failedProduct\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/product/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"product",
										"new"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Successful Cases",
					"item": [
						{
							"name": "New transaction T1",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"productsPurchased\": [\r\n        {\r\n            \"productId\": \"{{productId3}}\",\r\n            \"quantity\": {{transactionQuantity1_1}}\r\n        },\r\n        {\r\n            \"productId\": \"{{productId2}}\",\r\n            \"quantity\": {{transactionQuantity1_2}}\r\n        }\r\n    ], \r\n    \"contactId\": \"{{contactId2}}\",\r\n    \"transactionRating\": {{transactionRating1}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/transaction/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "New transaction T2",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"productsPurchased\": [\r\n        {\r\n            \"productId\": \"{{productId2}}\",\r\n            \"quantity\": {{transactionQuantity2}}\r\n        }\r\n    ], \r\n    \"contactId\": \"{{contactId2}}\",\r\n    \"transactionRating\": {{transactionRating2}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/transaction/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"T1 & T2 exists\", () => {\r",
											"    pm.expect(response.length).to.equal(2);\r",
											"});\r",
											"\r",
											"const T1 = response[0];\r",
											"const T2 = response[1];\r",
											"\r",
											"pm.environment.set(\"transactionId1\", T1._id);\r",
											"pm.environment.set(\"transactionId2\", T2._id);\r",
											"\r",
											"pm.test(\"T1 stored correctly\", () => {\r",
											"    pm.expect(T1.productsPurchased.length).to.eql(2);\r",
											"    pm.expect(T1.transactionRating).to.eql(parseFloat(pm.environment.get(\"transactionRating1\")));\r",
											"});\r",
											"\r",
											"pm.test(\"T2 stored correctly\", () => {\r",
											"    pm.expect(T2.productsPurchased.length).to.eql(1);\r",
											"    pm.expect(T2.transactionRating).to.eql(parseFloat(pm.environment.get(\"transactionRating2\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/transaction/getAll?userId={{userId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"getAll"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update transaction",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transactionId\": \"{{transactionId1}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"productsPurchased\": [\r\n        {\r\n            \"productId\": \"{{productId3}}\",\r\n            \"quantity\": {{transactionQuantity1_1}}\r\n        },\r\n        {\r\n            \"productId\": \"{{productId2}}\",\r\n            \"quantity\": {{transactionQuantityUpdated}}\r\n        }\r\n    ], \r\n    \"contactId\": \"{{contactId2}}\",\r\n    \"transactionRating\": {{transactionRating1}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/transaction/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"const p1 = response.productsPurchased[0];\r",
											"const p2 = response.productsPurchased[1];\r",
											"\r",
											"pm.test(\"Got the right category back\", () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(p1.productId).to.eql(pm.environment.get(\"productId3\"));\r",
											"    pm.expect(p1.quantity).to.eql(parseFloat(pm.environment.get(\"transactionQuantity1_1\")));\r",
											"    pm.expect(p2.productId).to.eql(pm.environment.get(\"productId2\"));\r",
											"    pm.expect(p2.quantity).to.eql(parseFloat(pm.environment.get(\"transactionQuantityUpdated\")));\r",
											"    pm.expect(response.transactionRating).to.eql(parseFloat(pm.environment.get(\"transactionRating1\")));\r",
											"    pm.expect(response.contactId).to.eql(pm.environment.get(\"contactId2\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/transaction/get?userId={{userId}}&transactionId={{transactionId1}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "transactionId",
											"value": "{{transactionId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete one transaction",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"transactionId\": \"{{transactionId1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/transaction/deleteOne",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"deleteOne"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify transaction deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Transaction deleted successfully\", () => {\r",
											"    var res = (_.isEmpty(pm.responseBody));\r",
											"    pm.expect(res).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/transaction/get?userId={{userId}}&transactionId={{transactionId1}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"get"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "transactionId",
											"value": "{{transactionId1}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Failing Cases",
					"item": [
						{
							"name": "New transaction without products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"contactId\": \"{{contactId2}}\",\r\n    \"transactionRating\": {{transactionRating1}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/transaction/new",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"transaction",
										"new"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"name\": \"{{userName}}\",\r\n    \"businessName\": \"{{userBusinessNameUpdated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify user update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"User Found and Logged In\", () => {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", response.id);\r",
									"\r",
									"pm.test(\"Correct user info registered in database\", () => {\r",
									"    pm.expect(response.name).to.eql(pm.environment.get(\"userName\"));\r",
									"    pm.expect(response.businessName).to.eql(pm.environment.get(\"userBusinessNameUpdated\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/deleteAccount",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"deleteAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify user deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify deletion of all contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All contacts deleted successfully\", () => {\r",
									"    var res = (_.isEmpty(pm.responseBody));\r",
									"    pm.expect(res).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/contact/getAll?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"contact",
								"getAll"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify deletion of all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All categories deleted successfully\", () => {\r",
									"    var res = (_.isEmpty(pm.responseBody));\r",
									"    pm.expect(res).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/category/getAll?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"category",
								"getAll"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify deletion of all product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All products deleted successfully\", () => {\r",
									"    var res = (_.isEmpty(pm.responseBody));\r",
									"    pm.expect(res).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/product/getAll?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"product",
								"getAll"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify deletion of all transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All transactions deleted successfully\", () => {\r",
									"    var res = (_.isEmpty(pm.responseBody));\r",
									"    pm.expect(res).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/transaction/getAll?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"transaction",
								"getAll"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}